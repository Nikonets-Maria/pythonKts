# Задание 8: Схватка двух ёкодзун Описание класса бойца   
# Создайте класс Fighter, описывающий бойца.   У бойца должны
# быть следующие атрибуты: name - его имя power - его сила 
# (какое-то число) is_alive - булево значение, указание на жив 
# или мёртв боец   У бойца должны быть следующие методы: 
# attack(self, fighter: Fighter)->bool show_info(self)   
# При создании экземпляра класса задайте бойцу имя и силу. 
# Неплохо, если сила будет сгенерирована случайным образом. 
# Для более реалистичной картины, можете сгенерировать рост и 
# вес бойца, а исходя из этих данных расчитать его силу 
# используя Индекс массы тела   Метод attack получает в качестве 
# аргумента экземпляр класса Fighter: соперника, которого 
# атакует текущий боец. Соперник может эту атаку блокировать 
# либо пропустить удар. Конечно, всё это решается случайным 
# образом. Если соперник блокировал удар, то метод attack 
# возвращает значение False. Если соперник пропустил удар, 
# то у него ухудшается здоровье. Например, из 100 вычитается 
# какое-либо число. В этом случае метод attack возвращает 
# значение Тrue. Кстати, будет неплохо, если число, на которое 
# уменьшается здоровье, всякий раз будет разное, так как удары
# могут быть разными по силе. Если у соперника закончилось 
# здоровье, то значение его атрибута is_alive устанавливается в 
# False. Будет неплохо, если все действия участников поединка 
# будут выводиться в консоль.   Описание класса схватки   
# Создайте класс Contest, который описывает логику игру. 
# У класса должны быть определены методы:
#  __init__(self, first: Fighter, second: Fighter) 
# fight(self)   Метод __init__ принимает в качестве 
# параметров два экземпляра класса Fighter и производит 
# необходимую инициализацию.   Метод fight воспроизводит 
# процесс схватки, в которой её участники атакуют друг друга 
# по очереди. Право начать схватку выбирается случайным образом. 
# Схватка заканчивается, когда у одного из участников значение 
# атрибута is_alive будет False. После того, как закончится 
# схватка, атрибут класса winner должен содержать экземпляр 
# класса бойца-победителя.   Как это должно работать (вариант)   
# contest = Contest(Fighter("Вася"), Fighter("Петя")) 
# winner = contest.fight() print("Победил боец", winner.name)   
# Вася: Рост: 196, Вес: 76, Сила: 88 Петя: Рост: 176, 
# Вес: 78, Сила: 79 ------------------------------------ 
# Петя атакует первым ------------------------------------ 
# Вася: Отхватил: 12, Здоровья: 88 Петя: Отхватил: 17, 
# Здоровья: 83 Вася: Отхватил: 10, Здоровья: 78 
# Петя: Отхватил: 16, Здоровья: 67 Вася: Отхватил: 16, З
# доровья: 62 Петя: Удар заблокировал Вася: Отхватил: 8, 
# Здоровья: 54 Петя: Удар заблокировал Вася: Удар заблокировал 
# Петя: Отхватил: 16, Здоровья: 51 Вася: Удар заблокировал 
# Петя: Отхватил: 14, Здоровья: 37 Вася: Отхватил: 14, 
# Здоровья: 40 Петя: Отхватил: 8, Здоровья: 29 Вася: 
# Отхватил: 12, Здоровья: 28 Петя: Отхватил: 12, Здоровья: 17 
# Вася: Отхватил: 10, Здоровья: 18 Петя: Отхватил: 18, 
# Здоровья: -1 ---------------------------------- 
# Победил боец Вася     
# Дополнительно 1   
# Измените программу так, чтобы была возможность дать более 
# слабому бойцу (согласно силе) начинать схватку первым.   
# Дополнительно 2   Измените программу так, чтобы была 
# возможность дать бойцам атаковать друг друга не по очереди, 
# а до первой заблокированной соперником атаки. В этом случае 
# примерный сценарий схватки может быть таким: Вася Рост: 179, 
# Вес: 108, Сила: 57 из 100 Петя Рост: 182, Вес: 65, 
# Сила: 85 из 100 -------------------------------------------- 
# Петя атакует первым 
# -------------------------------------------- 
# Вася: Отхватил: 13, Здоровья: 87 Вася: Удар заблокировал 
# Петя: Удар заблокировал Вася: Отхватил: 8, Здоровья: 79 
# Вася: Отхватил: 18, Здоровья: 61 Вася: Удар заблокировал 
# Петя: Удар заблокировал Вася: Отхватил: 10, Здоровья: 51 
# Вася: Отхватил: 16, Здоровья: 35 Вася: Удар заблокировал 
# Петя: Удар заблокировал Вася: Отхватил: 10, Здоровья: 25 
# Вася: Отхватил: 11, Здоровья: 14 Вася: Отхватил: 15, 
# Здоровья: -1 -------------------------------------------- 
# Победил боец Петя 
# Задание Описать схватку двух бойцов

import random

class Fighter:
    def __init__(self, name):
        self.name = name
        self.health = 100
        self.is_alive = True
        self.height = random.randint(160, 200) 
        self.weight = random.randint(50, 120)   
        self.power = self._calculate_power()


    def _calculate_power(self):
        bmi = self.weight / ((self.height / 100) ** 2)
        return int(bmi * 10)

    def attack(self, opponent):
        damage = random.randint(5, 20)
        if random.random() < 0.3: 
            print(f"{opponent.name}: Удар заблокировал")
            return False
        else:
            opponent.health -= damage
            print(f"{opponent.name}: Отхватил: {damage}, Здоровья: {opponent.health}")
            if opponent.health <= 0:
                opponent.is_alive = False
            return True

    def show_info(self):
        print(f"{self.name}: Рост: {self.height}, Вес: {self.weight}, Сила: {self.power}")


class Contest:
    def __init__(self, first, second):
        self.fighter1 = first
        self.fighter2 = second
        self.winner = None

    def fight(self):
        print("------------------------------------")
        if self.fighter1.power < self.fighter2.power:
          attacker = self.fighter1
          defender = self.fighter2
        else:
          attacker = random.choice([self.fighter1, self.fighter2])
          defender = self.fighter1 if attacker == self.fighter2 else self.fighter2

        print(f"{attacker.name} атакует первым")
        print("------------------------------------")

        while self.fighter1.is_alive and self.fighter2.is_alive:
          
          if attacker.attack(defender): 
            attacker, defender = defender, attacker
          else:
            break


        self.winner = self.fighter1 if self.fighter1.is_alive else self.fighter2
        print("------------------------------------")
        return self.winner



fighter1 = Fighter("Вася")
fighter2 = Fighter("Петя")

fighter1.show_info()
fighter2.show_info()

contest = Contest(fighter1, fighter2)
winner = contest.fight()
print("Победил боец", winner.name)

